# -*- coding: utf-8 -*-
"""RNN orig.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LkWiFjeGoRq18rGOQTgpn5T7LwDJiG-J
"""

!pip install unidecode

import unidecode
import string
import random
import re

all_characters = string.printable
n_characters = len(all_characters)

file = unidecode.unidecode(open('shakespeare_train.txt').read())
file_len = len(file)
print('file_len =', file_len)

chunk_len = 200

def random_chunk():
    start_index = random.randint(0, file_len - chunk_len)
    end_index = start_index + chunk_len + 1
    return file[start_index:end_index]

print(random_chunk())

# Turn string into list of longs
def char_tensor(string):
    tensor = torch.zeros(len(string)).long()
    for c in range(len(string)):
        tensor[c] = all_characters.index(string[c])
    return tensor


print(char_tensor('abcDEF'))

import torch
import torch.nn as nn
import torch.optim as optim

class RNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, n_layers=1):
        super(RNN, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.n_layers = n_layers

        self.encoder = nn.Embedding(input_size, hidden_size)
        self.rnn = nn.RNN(hidden_size, hidden_size, n_layers)
        self.decoder = nn.Linear(hidden_size, output_size)

    def forward(self, input, hidden):
        input = self.encoder(input.view(1, -1))
        output, hidden = self.rnn(input.view(1, 1, -1), hidden)
        output = self.decoder(output.view(1, -1))
        return output, hidden

    def init_hidden(self):
        return torch.zeros(self.n_layers, 1, self.hidden_size)

class LSTM(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, n_layers=1):
        super(LSTM, self).__init__()
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.n_layers = n_layers

        self.encoder = nn.Embedding(input_size, hidden_size)
        self.lstm = nn.LSTM(hidden_size, hidden_size, n_layers)
        self.decoder = nn.Linear(hidden_size, output_size)

    def forward(self, input, hidden):
        input = self.encoder(input.view(1, -1))
        output, hidden = self.lstm(input.view(1, 1, -1), hidden)
        output = self.decoder(output.view(1, -1))
        return output, hidden

    def init_hidden(self):
        return (torch.zeros(self.n_layers, 1, self.hidden_size),
                torch.zeros(self.n_layers, 1, self.hidden_size))

def random_training_set():
    chunk = random_chunk()
    inp = char_tensor(chunk[:-1])
    target = char_tensor(chunk[1:])
    return inp, target

def evaluate(model, prime_str='A', predict_len=100, temperature=0.8):
    model.eval()
    hidden = model.init_hidden()
    prime_input = char_tensor(prime_str)
    predicted = prime_str

    # Use priming string to "build up" hidden state
    for p in range(len(prime_str) - 1):
        _, hidden = model(prime_input[p], hidden)
    inp = prime_input[-1]

    for p in range(predict_len):
        output, hidden = model(inp, hidden)

        # Sample from the network as a multinomial distribution
        output_dist = output.data.view(-1).div(temperature).exp()
        top_i = torch.multinomial(output_dist, 1)[0]

        # Add predicted character to string and use as next input
        predicted_char = all_characters[top_i]
        predicted += predicted_char
        inp = char_tensor(predicted_char)

    return predicted

import time
import math

def time_since(since):
    s = time.time() - since
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)

def train(model, optimizer, criterion, inp, target):
    hidden = model.init_hidden()
    model.zero_grad()
    loss = 0

    for c in range(chunk_len):
        output, hidden = model(inp[c], hidden)
        loss += criterion(output, target[c].unsqueeze(0))

    loss.backward()
    optimizer.step()

    return loss.item() / chunk_len

n_epochs = 2000
print_every = 100
plot_every = 10
hidden_size = 100
n_layers = 1
lr = 0.005

# 모델 초기화 (RNN과 LSTM 중 선택)
rnn_model = RNN(n_characters, hidden_size, n_characters, n_layers)
lstm_model = LSTM(n_characters, hidden_size, n_characters, n_layers)

rnn_optimizer = torch.optim.Adam(rnn_model.parameters(), lr=lr)
lstm_optimizer = torch.optim.Adam(lstm_model.parameters(), lr=lr)
criterion = nn.CrossEntropyLoss()

start = time.time()
rnn_all_losses = []
lstm_all_losses = []
rnn_loss_avg = 0
lstm_loss_avg = 0

for epoch in range(1, n_epochs + 1):
    inp, target = random_training_set()

    # RNN 훈련
    rnn_loss = train(rnn_model, rnn_optimizer, criterion, inp, target)
    rnn_loss_avg += rnn_loss

    # LSTM 훈련
    lstm_loss = train(lstm_model, lstm_optimizer, criterion, inp, target)
    lstm_loss_avg += lstm_loss

    if epoch % print_every == 0:
        print('[%s (%d %d%%) RNN Loss: %.4f LSTM Loss: %.4f]' % (time_since(start), epoch, epoch / n_epochs * 100, rnn_loss, lstm_loss))
        print("RNN Evaluation:", evaluate(rnn_model, 'Wh', 100), '\n')
        print("LSTM Evaluation:", evaluate(lstm_model, 'Wh', 100), '\n')

    if epoch % plot_every == 0:
        rnn_all_losses.append(rnn_loss_avg / plot_every)
        lstm_all_losses.append(lstm_loss_avg / plot_every)
        rnn_loss_avg = 0
        lstm_loss_avg = 0

import matplotlib.pyplot as plt

plt.figure()
plt.plot(rnn_all_losses, label='RNN Loss')
plt.plot(lstm_all_losses, label='LSTM Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

def softmax_with_temperature(logits, temperature):
    return F.softmax(logits / temperature, dim=0)

import torch
import torch.nn.functional as F

def softmax_with_temperature(logits, temperature):
    return F.softmax(logits / temperature, dim=0)

!python3 generate.py --model 'lstm_model.pth' --seed 'The' --temperature 0.8 --length 100 --model_type 'LSTM'

print(evaluate('Th', 200, temperature=0.8))

print(evaluate('Th', 200, temperature=0.2))

print(evaluate('Th', 200, temperature=1.4))